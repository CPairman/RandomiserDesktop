package main.java.app;

import main.java.util.Format;
import main.java.util.Random;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class Randomiser {
    private static final int RAND_NUM_MAXIMUM = 10_000_000;
    private static final int RAND_NUM_MINIMUM = -10_000_000;
    private static final int RAND_NUM_MAX_QUANTITY = 100;
    private static final int RAND_NUM_MIN_QUANTITY = 1;
    private static final int DEFAULT_SPINNER_VALUE = 1;
    private static final int DEFAULT_SPINNER_STEP = 1;

    private static final String TITLE = "Randomiser";
    private static final String RAND_NUM_QUANTITY_TOO_HIGH_MESSAGE = """
                                There are not enough unique numbers in this range.
                                All possible numbers will be generated.""";

    /* Declaration of form components */
    private JPanel mainPanel;

    /* Random number generator components */
    private JSpinner randNumQuantity;
    private JSpinner randNumLowerBound;
    private JSpinner randNumUpperBound;
    private JCheckBox randNumAllowDuplicates;
    private JCheckBox randNumKeepPrevious;
    private JButton randNumClear;
    private JButton randNumGenerate;
    private JTextArea generatedNumsDisplay;

    /**
     * Returns the top level {@code JPanel} of the frame.
     *
     * @return The top level {@code JPanel}.
     */
    public JPanel getMainPanel() {
        return mainPanel;
    }

    /**
     * Initialises components of the UI, where initialisation code cannot be generated by the IDE.
     * This method is called by the class constructor generated by the IDE.
     */
    private void createUIComponents() {
        createRandNumComponents();
    }

    /**
     * Initialises components of the random number generator tab.
     */
    private void createRandNumComponents(){
        randNumQuantity = new JSpinner(
                new SpinnerNumberModel(DEFAULT_SPINNER_VALUE,
                        RAND_NUM_MIN_QUANTITY,
                        RAND_NUM_MAX_QUANTITY,
                        DEFAULT_SPINNER_STEP));

        randNumLowerBound = new JSpinner(
                new SpinnerNumberModel(
                        DEFAULT_SPINNER_VALUE,
                        RAND_NUM_MINIMUM,
                        RAND_NUM_MAXIMUM,
                        DEFAULT_SPINNER_STEP));

        randNumUpperBound = new JSpinner(
                new SpinnerNumberModel(
                        DEFAULT_SPINNER_VALUE,
                        RAND_NUM_MINIMUM,
                        RAND_NUM_MAXIMUM,
                        DEFAULT_SPINNER_STEP));

        randNumGenerate = new JButton();
        randNumGenerate.addActionListener(e -> generateRandomNumbers());

        randNumClear = new JButton();
        randNumClear.addActionListener(e -> clearGeneratedNumsDisplay());
    }

    /**
     * Handles the 'Generate' button being clicked on the random number generator tab.
     *
     * If the checkbox to allow duplicate numbers is checked, a list of non-unique pseudorandom
     * numbers is generated within the range given by the user and displayed on the form.
     *
     * If the checkbox is not checked, the method will generate a list of unique pseudorandom
     * numbers, within the range given by the user, and display this on the form.
     */
    private void generateRandomNumbers(){
        showWaitCursor();

        final int lowerBound = getLowerBound();
        final int upperBound = getUpperBound();

        final int quantity;
        final List<Integer> randNums;

        if(randNumAllowDuplicates.isSelected()){
            quantity = (int) randNumQuantity.getValue();
            randNums = Random.getRandomIntegerList(lowerBound, upperBound, quantity);
        }else{
            quantity = checkUniqueNumbersQuantity(lowerBound, upperBound);
            randNums = Random.getUniqueRandomIntegerList(lowerBound, upperBound, quantity);
        }

        displayGeneratedNums(randNums);
        showDefaultCursor();
    }

    /**
     * Returns the lower-bound value entered by the user on the random number generator tab.
     *
     * It's possible for the user to enter upper- and lower-bound values in the wrong order,
     * i.e entering a smaller number in {@code randNumUpperBound} and a larger number in
     * {@code randNumLowerBound}.
     *
     * This method accounts for that by returning the smallest number entered in either spinner.
     *
     * @return The lower-bound value entered by the user on the random number generator tab.
     */
    private int getLowerBound(){
        return Math.min((int) randNumLowerBound.getValue(),
                (int) randNumUpperBound.getValue());
    }

    /**
     * Returns the upper-bound value entered by the user on the random number generator tab.
     *
     * It's possible for the user to enter upper- and lower-bound values in the wrong order,
     * i.e entering a smaller number in {@code randNumUpperBound} and a larger number in
     * {@code randNumLowerBound}.
     *
     * This method accounts for that by returning the largest number entered in either spinner.
     *
     * @return The upper-bound value entered by the user on the random number generator tab.
     */
    private int getUpperBound(){
        return Math.max((int) randNumLowerBound.getValue(),
                (int) randNumUpperBound.getValue());
    }

    /**
     * Returns the quantity of numbers that the user has requested, only for use when the user
     * has requested UNIQUE numbers.
     *
     * As the numbers must be unique, it's possible for the user to request more numbers than
     * exist between {@code lowerBound} and {@code upperBound}.
     *
     * If this happens, the method will display a warning to the user, then return the maximum
     * quantity possible.
     *
     * @param lowerBound The lower-bound of the range requested by the user.
     * @param upperBound The upper-bound of the range requested by the user.
     *
     * @return The quantity of numbers that the user has requested, or the maximum quantity possible.
     */
    private int checkUniqueNumbersQuantity(int lowerBound, int upperBound){
        final int quantity = (int) randNumQuantity.getValue();
        final int range = upperBound - lowerBound + 1;

        if(quantity > range){
            JOptionPane.showMessageDialog(mainPanel,
                    RAND_NUM_QUANTITY_TOO_HIGH_MESSAGE, TITLE,
                    JOptionPane.WARNING_MESSAGE);

            return range;
        }else{
            return quantity;
        }
    }

    /**
     * Formats and displays a {@code List} of numbers on the random number generator tab.
     *
     * @param nums The {@code List} of numbers to display.
     */
    private void displayGeneratedNums(List<Integer> nums){
        String numsAsString = Format.formatIntegerListAsString(nums);

        if(randNumKeepPrevious.isSelected()){
            generatedNumsDisplay.append(numsAsString + '\n');
        }else{
            generatedNumsDisplay.setText(numsAsString + '\n');
        }
    }

    /**
     * Clears the display box for generated numbers.
     */
    private void clearGeneratedNumsDisplay(){
        generatedNumsDisplay.setText("");
    }

    /**
     * Sets the cursor to a 'wait' cursor while hovering over the main panel.
     */
    private void showWaitCursor(){
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }

    /**
     * Sets the cursor to the default while hovering over the main panel.
     */
    private void showDefaultCursor(){
        mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
}
